// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // Uses connection pooling
  url = env("POSTGRES_PRISMA_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("POSTGRES_URL_NON_POOLING")
}


model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model IeltsAnswer {
  id          Int    @id @default(autoincrement())
  tag         String
  user_id     String
  partOne     IeltsPartOne[]
  partTwo     IeltsPartTwo?
  partThree     IeltsPartThree[]
}

model IeltsPartOne {
  id    Int    @id @default(autoincrement())
  ielts_answer_id Int
  ielts_answer  IeltsAnswer @relation(fields: [ielts_answer_id], references: [id])
  question    String
  answer      String
  ideal_answer  String
}

model IeltsPartTwo {
  id    Int    @id @default(autoincrement())
  ielts_answer_id Int @unique
  ielts_answer  IeltsAnswer @relation(fields: [ielts_answer_id], references: [id])
  question    String
  shouldSay   String[]
  answer      String
  ideal_answer  String
}

model IeltsPartThree {
  id    Int    @id @default(autoincrement())
  ielts_answer_id Int
  ielts_answer  IeltsAnswer @relation(fields: [ielts_answer_id], references: [id])
  question    String
  answer      String
  ideal_answer  String
}

model InterviewAnswer {
  id          Int    @id @default(autoincrement())
  tag         String
  user_id     String
  partOne     InterviewPartOne[]
}

model InterviewPartOne {
  id    Int    @id @default(autoincrement())
  interview_answer_id Int
  interview_answer  InterviewAnswer @relation(fields: [interview_answer_id], references: [id])
  question    String
  answer      String
  ideal_answer  String
}
